Итак у меня имеется bash скрипт который настраивает VPN Сервер на VDS cервере.
(Скрипт сервер на Linux использует Docker для развертывания контейнера Outline (Shadowbox), который обеспечивает VPN/прокси-функционал на основе протокола Shadowsocks. Весь трафик пропускается через этот контейнер, который слушает определённые порты для доступа пользователей. Наряду с этим, на сервере развёрнут Watchtower — сервис, который регулярно проверяет обновления Docker-образа Outline (Shadowbox) и автоматически скачивает и разворачивает новую версию, не требуя ручного вмешательства.
На клиентском устройстве для соедениния с созданным VPN сервером используется Outline Manager, в который передается строка (пример: {"apiurl": "https://xxx.xxx.xxx.xxX:XXXXX/XXXxxxxxxxxxxxxxxxxxxx", "c
ertSha256": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxx" }) созданная скриптом, для того, чтобы закончить настройку на клиенте).

ЗАДАНИЕ ДЛЯ CHAT-GTP:
Исходя из нашего технического контекста, который был описан выше, напиши новый (полностью переработанный и усовершенствованный) скрипт, который будет в дополненнии ко всему тому что он уже делает, еще будет делать:

1. Блокировка ICMP (ping) и других «пробивающих» запросов.
(чтобы провайдер и сайты не могли определить факт использования впн)
Пример требуемого кода:
```
# Отключаем (или ограничиваем) ICMP. 
function configure_icmp() {
  LOG_INFO "Ограничиваем ICMP (ping) для сокрытия VPN-туннеля..."
  # Пример: полностью блокируем входящие ping-запросы и исходящие ping-ответы
  iptables -A INPUT -p icmp --icmp-type echo-request -j DROP \
    && LOG_OK "ICMP echo-request входящий заблокирован." \
    || { LOG_ERROR "Ошибка при блокировке входящих ICMP echo-request."; (( SCRIPT_ERRORS++ )); }

  iptables -A OUTPUT -p icmp --icmp-type echo-reply -j DROP \
    && LOG_OK "ICMP echo-reply исходящий заблокирован." \
    || { LOG_ERROR "Ошибка при блокировке исходящих ICMP echo-reply."; (( SCRIPT_ERRORS++ )); }
}
```
2. настройка MTU (чтобы провайдер и сайты не могли определить факт использования впн)
3. настройки NAT (чтобы провайдер и сайты не могли определить факт использования впн)
4. настройки TCP/UDP портов (порт 443)(чтобы провайдер и сайты не могли определить факт использования впн)(Обрати внимание, на те технологии которые мы должен использовать и не допусти ситуации чтобы порты были забиты или неверно использовались)
5. Шифрование заголовков. (чтобы провайдер и сайты не могли определить факт использования впн)

Общие требования к тому, как CHAT-GTP должен писать код:
0. Весь код напиши как сверх профессионально, с макимальным учетом всех деталей.
1. The entire script must be fully commented in Russian.
2. The script must output logs that inform the user about the execution of each step.
3. Use the echo command for logging.
4. All logs must be color-coded to make it easier for the user to distinguish successfully completed processes from others.

Script Construction Principles:
1. Перед началом написания кода, CHAT-GTP должен продумать каждый шаг, выяснить совместимы ли действия которые в них совершаются с друг другом (я имею совместимость технологий и состояний).
2. Если представить, что код делиться на логические части, то перед выполнением основной локальной задачи CHAT-GTP должен написать код который подготавливает требуемые условия для выполнения последующего кода (я имею ввиду например проверку наличия ПО, открытых портов, правильных настроек итд).
3. Перед и после исполнения каждого логического куска кода должны выводиться логи, которые отрапортуют о проделланной работе и о состоянии.
4. В конце каждого логического куска кода тестируй проделанную работу (например если ты установил что-то, то проверь установилось ли оно, если ты открыл порт, проверь открыт ли он или нет).
5. При возникновении ошибок скрипт НЕ прерывается (exit не используется), а только в консоль выводиться дополнительный лог с детальным выводом информации что произошло.


Прочие требования:
1. После того как скрипт все установит,настроит,протестирует, он должен распечатать в консоль все сгенерированные ключи/пароли/сертификаты/конфигурации.
(самым первым скрипт должен распечатать конфигурационную строку для OutlineManager (пример: {"apiurl": "https://xxx.xxx.xxx.xxX:XXXXX/XXXxxxxxxxxxxxxxxxxxxx", "c
ertSha256": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxx" }))